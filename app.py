from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from twilio.rest import Client as TwilioClient
from dotenv import load_dotenv
from openai import OpenAI
from gtts import gTTS
import os
import base64
import requests

# Load .env variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")

# Init services
app = Flask(__name__)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
twilio_client = TwilioClient(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

# Store latest image per user (phone number)
user_last_image = {}

# üß† GPT Prompt Template
def build_prompt(lang):
    if lang == "English":
        return """Identify the pest in this image. Respond in English in the following format:
Bug identified: "..."
Risk factor: "..." (e.g. Moderate / Critical / Low)
Natural remedy: "..." (organic solution only)"""
    
    elif lang == "Hindi":
        return """‡§á‡§∏ ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ú‡§µ‡§æ‡§¨ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§á‡§∏ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç:
‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®: "..."
‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞: "..."
‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§â‡§™‡§ö‡§æ‡§∞: "..." (‡§ï‡•á‡§µ‡§≤ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®)"""
    
    elif lang == "Telugu":
        return """‡∞à ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç‡∞≤‡±ã ‡∞™‡±Å‡∞∞‡±Å‡∞ó‡±Å‡∞®‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞à ‡∞´‡∞æ‡∞∞‡±ç‡∞Æ‡∞æ‡∞ü‡±ç‚Äå‡∞≤‡±ã ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø:
‡∞™‡±Å‡∞∞‡±Å‡∞ó‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å: "..."
‡∞Ü‡∞™‡∞¶ ‡∞∏‡±ç‡∞•‡∞æ‡∞Ø‡∞ø: "..."
‡∞™‡±ç‡∞∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç: "..." (‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á)"""

# üñºÔ∏è Download image from Twilio ‚Üí save ‚Üí return path
def download_image(media_url, phone):
    try:
        res = requests.get(media_url, auth=(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN))
        if res.status_code == 200:
            path = f"static/{phone}.jpg"
            with open(path, "wb") as f:
                f.write(res.content)
            return path
        else:
            raise Exception("Twilio image download failed")
    except Exception as e:
        raise Exception(f"Image error: {e}")

# üß† Send image to GPT-4 Vision
def ask_gpt(image_path, lang):
    with open(image_path, "rb") as f:
        base64_img = base64.b64encode(f.read()).decode('utf-8')

    prompt = build_prompt(lang)

    response = openai_client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_img}"}}
                ]
            }
        ]
    )
    return response.choices[0].message.content.strip()

# üîä Generate Telugu voice (only if needed)
def generate_telugu_audio(text):
    tts = gTTS(text=text, lang="te")
    audio_path = "static/telugu.mp3"
    tts.save(audio_path)
    return audio_path

# üîä Generate Hindi voice (only if needed)
def generate_telugu_audio(text):
    tts = gTTS(text=text, lang="hi")
    audio_path = "static/hindi.mp3"
    tts.save(audio_path)
    return audio_path


# üì© WhatsApp webhook handler
@app.route("/whatsapp", methods=["POST"])
def whatsapp():
    from_number = request.form.get("From")
    body = request.form.get("Body", "").strip()
    media_url = request.form.get("MediaUrl0")
    resp = MessagingResponse()

    print(f"üì≤ From: {from_number} | Text: {body} | Media: {media_url}")

    # Step 1: If image is sent
    if media_url:
        try:
            image_path = download_image(media_url, from_number)
            user_last_image[from_number] = image_path
            resp.message("‚úÖ Image received! Now reply with a language: English, Hindi, or Telugu.")
        except Exception as e:
            resp.message(f"‚ùå Failed to process image: {e}")
        return str(resp)

    # Step 2: If user sent language preference
    if body.lower() in ["english", "hindi", "telugu"]:
        lang = body.capitalize()
        image_path = user_last_image.get(from_number)

        if not image_path:
            resp.message("‚ö†Ô∏è Please send an image of the pest first.")
            return str(resp)

        try:
            response_text = ask_gpt(image_path, lang)
            final_message = f"üåê {lang}:\n" + response_text

            if lang == "Telugu":
                audio_path = generate_telugu_audio(response_text)
                audio_url = f"{request.host_url}static/telugu.mp3"
                final_message += f"\nüîä Voice Note: {audio_url}"

            elif lang == "Hindi":
                audio_path = generate_telugu_audio(response_text)
                audio_url = f"{request.host_url}static/hindi.mp3"
                final_message += f"\nüîä Voice Note: {audio_url}"

            resp.message(final_message)
        except Exception as e:
            resp.message(f"‚ùå Failed to analyze image: {e}")
        return str(resp)

    # Step 3: Fallback message
    resp.message("üëã Send a pest image first, then reply with 'English', 'Hindi', or 'Telugu'.")
    return str(resp)

# ‚úÖ Run Flask server
if __name__ == "__main__":
    app.run(debug=True)
